// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Models.DailyScrumInfo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int?>("SprintId");

                    b.Property<DateTime>("Сonducted");

                    b.HasKey("Id");

                    b.HasIndex("SprintId");

                    b.ToTable("DailyScrumInfo");
                });

            modelBuilder.Entity("DAL.Models.Defect", b =>
                {
                    b.Property<int>("DefectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActualResults");

                    b.Property<string>("AssignedTo");

                    b.Property<string>("Attachments");

                    b.Property<int>("Blocked");

                    b.Property<string>("Chat");

                    b.Property<string>("DefectName");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("ExpectedResults");

                    b.Property<string>("FixResults");

                    b.Property<string>("Priority");

                    b.Property<string>("Sprint");

                    b.Property<string>("State");

                    b.Property<int>("Status");

                    b.Property<string>("StepsToReproduse");

                    b.Property<int?>("StoryId");

                    b.HasKey("DefectId");

                    b.HasIndex("StoryId");

                    b.ToTable("Defects");
                });

            modelBuilder.Entity("DAL.Models.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Blocked");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("OwnerUserId");

                    b.Property<int>("State");

                    b.HasKey("FeatureId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("DAL.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("RoleId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DAL.Models.ScrumTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActualHours");

                    b.Property<int>("AssignedToUserId");

                    b.Property<string>("Blocked")
                        .HasMaxLength(500);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("NameId");

                    b.Property<int>("PlannedHours");

                    b.Property<int>("RemainingHours");

                    b.Property<string>("State");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("WorkNotes")
                        .HasMaxLength(500);

                    b.HasKey("TaskId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("NameId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("DAL.Models.Sprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HistoryId");

                    b.Property<string>("Retrospective");

                    b.Property<string>("Review");

                    b.Property<int>("Stage");

                    b.Property<int?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("TeamId");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("DAL.Models.SprintStagesHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Begined");

                    b.Property<DateTime>("Initiated");

                    b.Property<DateTime>("Planned");

                    b.Property<DateTime>("RetrospectiveDone");

                    b.Property<DateTime>("ReviewDone");

                    b.HasKey("Id");

                    b.ToTable("SprintStagesHistory");
                });

            modelBuilder.Entity("DAL.Models.Story", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignedToUserId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int?>("FeatureId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("SprintId");

                    b.Property<int>("Status");

                    b.Property<int?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("SprintId");

                    b.HasIndex("TeamId");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("DAL.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ScrumMasterUserId");

                    b.HasKey("Id");

                    b.HasIndex("ScrumMasterUserId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activity");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("RoleId");

                    b.Property<int?>("TeamId");

                    b.HasKey("UserId");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DAL.Models.DailyScrumInfo", b =>
                {
                    b.HasOne("DAL.Models.Sprint")
                        .WithMany("DailyScrums")
                        .HasForeignKey("SprintId");
                });

            modelBuilder.Entity("DAL.Models.Defect", b =>
                {
                    b.HasOne("DAL.Models.Story")
                        .WithMany("Defects")
                        .HasForeignKey("StoryId");
                });

            modelBuilder.Entity("DAL.Models.Feature", b =>
                {
                    b.HasOne("DAL.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");
                });

            modelBuilder.Entity("DAL.Models.ScrumTask", b =>
                {
                    b.HasOne("DAL.Models.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Story", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Sprint", b =>
                {
                    b.HasOne("DAL.Models.SprintStagesHistory", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("DAL.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("DAL.Models.Story", b =>
                {
                    b.HasOne("DAL.Models.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("DAL.Models.Feature", "Feature")
                        .WithMany("Stories")
                        .HasForeignKey("FeatureId");

                    b.HasOne("DAL.Models.Sprint", "Sprint")
                        .WithMany("Backlog")
                        .HasForeignKey("SprintId");

                    b.HasOne("DAL.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("DAL.Models.Team", b =>
                {
                    b.HasOne("DAL.Models.User", "ScrumMaster")
                        .WithMany()
                        .HasForeignKey("ScrumMasterUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.HasOne("DAL.Models.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId");
                });
#pragma warning restore 612, 618
        }
    }
}
